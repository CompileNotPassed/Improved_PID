C51 COMPILER V9.60.0.0   POSITION_PID                                                      11/12/2021 23:06:01 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE POSITION_PID
OBJECT MODULE PLACED IN .\Out_File\Position_PID.obj
COMPILER INVOKED BY: D:\Keil_for_C51\C51\BIN\C51.EXE ..\BSP\Position_PID\Position_PID.c LARGE OMF2 OPTIMIZE(8,SPEED) BRO
                    -WSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\USER\inc;
                    -..\USER\src;..\CODE;..\BSP\Position_PID;..\BSP\oled;..\BSP\PID) DEBUG PRINT(.\Out_File\Position_PID.lst) TABS(2) OBJECT(
                    -.\Out_File\Position_PID.obj)

line level    source

   1          #include "Position_PID.h"
   2          #include "stdio.h"
   3          
   4          pid_t     PID_Motor[2];
   5          lowpass_t LWF_Motor;
   6          float ControlSpeed = 0;
   7          float target=2400;
   8          float Pwm;
   9          float fspeed;
  10          
  11          void Position_PID_Init(float Kp,float Ki,float Kd,float maxintegral){
  12   1          PID_Motor->SetValue= 0.0;
  13   1          PID_Motor->ActualValue= 0.0;
  14   1          PID_Motor->err= 0.0;
  15   1          PID_Motor->err_last=0.0;
  16   1          PID_Motor->integral= 0.0;
  17   1          PID_Motor->Kp= Kp;
  18   1          PID_Motor->Ki= Ki;
  19   1          PID_Motor->Kd= Kd;
  20   1          PID_Motor->maxintegral=maxintegral;
  21   1        }
  22            
  23          
  24          float Position_PID_Realize( float Target, float Input){
  25   1            PID_Motor->SetValue = Target;
  26   1            PID_Motor->ActualValue = Input;
  27   1            PID_Motor->err = PID_Motor->SetValue - PID_Motor->ActualValue;
  28   1            PID_Motor->integral += PID_Motor->err;
  29   1            //if(PID_Motor->integral>=PID_Motor->maxintegral) PID_Motor->integral = PID_Motor->maxintegral;
  30   1            PID_Motor->result = PID_Motor->Kp * PID_Motor->err + PID_Motor->Ki * PID_Motor->integral + PID_Motor->K
             -d * ( PID_Motor->err - PID_Motor->err_last);
  31   1            PID_Motor->err_last = PID_Motor->err;
  32   1            return PID_Motor->result;
  33   1        }
  34          
  35          void Position_LWF_Init(void){
  36   1          LWF_Motor.Result_Last = 0;
  37   1      }
  38          
  39          
  40          signed short Position_LWF_Realize(signed short Value,float a){
  41   1          LWF_Motor.Result= (1-a)*Value + a*LWF_Motor.Result_Last;
  42   1          LWF_Motor.Result_Last = LWF_Motor.Result;
  43   1          return LWF_Motor.Result;
  44   1        }
  45          
  46          //float GetSpeed()
  47          //{
  48          //  float speed_t;
  49          //  speed_t = (short)(__HAL_TIM_GET_COUNTER(&htim2)*10);
  50          //  __HAL_TIM_SET_COUNTER(&htim2,0);
  51          //  return speed_t;
C51 COMPILER V9.60.0.0   POSITION_PID                                                      11/12/2021 23:06:01 PAGE 2   

  52          //}
  53          
  54          //void WritePwm(float speed)
  55          //{
  56          //  if(speed>=0)
  57          //  {
  58          //    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
  59          //    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);
  60          //    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,(int)speed);
  61          //  }
  62          //  else
  63          //  {
  64          //    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
  65          //    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
  66          //    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,(int)speed);
  67          //  }
  68          //}
  69          
  70          //void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
  71          //{
  72          //  static uint8_t i=0;
  73          //  if(htim->Instance == TIM4)
  74          //  {
  75          //    fspeed=GetSpeed();
  76          //    Pwm=Position_PID_Realize(target,fspeed);
  77          //    if(Pwm>1000) Pwm=1000;
  78          //    WritePwm(Pwm);
  79          //  }
  80          //  i++;
  81          //  if(i>=100)
  82          //  {
  83          //    HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
  84          //    i=0;
  85          //  }
  86          //  if(htim->Instance == TIM2)
  87          //  {
  88          //    
  89          //  }
  90          //}
  91          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    566    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    114      30
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
